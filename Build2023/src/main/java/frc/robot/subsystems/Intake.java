// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.revrobotics.CANSparkMax.*;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

/**
 *
 */
public class Intake extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax sm_motor_right;
private CANSparkMax sm_motor_left;
private MotorControllerGroup mg_intake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double d_intake_speed = 0.5;
    private double d_eject_speed = -0.5;
    /**
    *
    */
    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
sm_motor_right = new CANSparkMax(21, MotorType.kBrushless);
 
 sm_motor_right.restoreFactoryDefaults();  
sm_motor_right.setInverted(true);
sm_motor_right.setIdleMode(IdleMode.kBrake);
sm_motor_right.burnFlash();
  

sm_motor_left = new CANSparkMax(22, MotorType.kBrushless);
 
 sm_motor_left.restoreFactoryDefaults();  
sm_motor_left.setInverted(false);
sm_motor_left.setIdleMode(IdleMode.kBrake);
sm_motor_left.burnFlash();
  

mg_intake = new MotorControllerGroup(sm_motor_right, sm_motor_left  );
 addChild("mg_intake",mg_intake);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    sm_motor_left.setSmartCurrentLimit(10);
    sm_motor_right.setSmartCurrentLimit(10);
    sm_motor_right.setSecondaryCurrentLimit(20);
    sm_motor_left.setSecondaryCurrentLimit(20);
    sm_motor_left.burnFlash();
    sm_motor_right.burnFlash();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("IL Temp", sm_motor_left.getMotorTemperature());
        SmartDashboard.putNumber("IR Temp", sm_motor_right.getMotorTemperature());
        SmartDashboard.putNumber("IR Volt", sm_motor_right.getOutputCurrent());
        SmartDashboard.putNumber("IL Volt", sm_motor_left.getOutputCurrent());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setIntakeSpeed(double intakeSpeed) {
        mg_intake.set(intakeSpeed);
    }
    public void takeGamePiece() {
        setIntakeSpeed(d_intake_speed);
    }
    public void ejectGamePiece() {
        setIntakeSpeed(d_eject_speed);
    }
    public void intakeStop() {
        setIntakeSpeed(0);
    }
}

